name: Execução de Testes

on:
  workflow_call:

jobs:
  unit-test:
    name: Teste de Unidade
    runs-on: ubuntu-latest
    steps:
        - name: Obtendo o código do projeto
          uses: actions/checkout@v4
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: "8.0.300"
        - name: Execução de Teste de Unidade
          working-directory: ./src
          run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

  integration-test:
    name: Teste de Integração
    runs-on: ubuntu-latest
    services:
        postgre:
            image: postgres:latest
            ports:
                - 5432:5432
            env:
                POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
    steps:
        - name: Obtendo o código do projeto
          uses: actions/checkout@v4
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: "8.0.300"
        - name: Execução de Teste de Integração
          working-directory: ./src
          run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
          env:
            ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ secrets.POSTGRES_DB }};Username=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }}"

  sonarqube:
    name: Scan com Sonarqube
    runs-on: [self-hosted]
    steps:
        - name: Obtendo o código do projeto
          uses: actions/checkout@v4
        - name: Setup JDK
          uses: actions/setup-java@v4
          with:
            distribution: adopt
            java-version: "21"
        # - name: Setup dotnet
        #   uses: actions/setup-dotnet@v4
        #   with:
        #     dotnet-version: "8.0.300"
        - name: Adiciona dotnet no PATH
          run: echo "$HOME/.dotnet:$HOME/.dotnet/tools" >> $GITHUB_PATH
        - name: Instalação do SonarScanner (local)
          run: |
            dotnet new tool-manifest
            dotnet tool install dotnet-sonarscanner
        - name: Build e Analise
          working-directory: ./src
          run: |
            dotnet tool run dotnet-sonarscanner begin /k:"review-filmes" \
            /d:sonar.host.url="http://localhost:9000" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.javascript.enabled=false \
            /d:sonar.typescript.enabled=false
            dotnet build Review-Filmes.sln
            dotnet tool run dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        # - name: Verificação do Quality Gate
        #   uses: sonarsource/sonarqube-quality-gate-action@master
        #   id: sonarqube-quality-gate-check
        #   env:
        #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #     SONAR_HOST_URL: http://localhost:9000
        #   with:
        #     scanMetadataReportFile: ./src/.sonarqube/out/.sonar/report-task.txt
        # - name: Exibir status Quality Gate
        #   if: ${{ always() }}
        #   run: echo "O status do Quality Gate é ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          

